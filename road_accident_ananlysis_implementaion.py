# -*- coding: utf-8 -*-
"""Road_Accident_Ananlysis_Implementaion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Lryt83D9ZyADwLGcwKjyUvLGUhfO5w3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset=pd.read_csv("Dataset.csv")

dataset.head()

dataset.describe(include="all").T

dataset.info()

for i in dataset.columns:
  dataset.loc[dataset[i] == "Data missing or out of range", i] = None

dataset.info()

dataset.describe(include="all").T

print(dataset['Location_Easting_OSGR'].corr(dataset['Longitude']))
print(dataset['Location_Northing_OSGR'].corr(dataset['Latitude']))

dataset = dataset.drop(['Location_Easting_OSGR', 'Location_Northing_OSGR'], axis=1)

dataset.columns = map(str.lower, dataset.columns)
dataset.columns = dataset.columns.str.replace('.','')
dataset.columns = dataset.columns.str.replace('(','')
dataset.columns = dataset.columns.str.replace(')','')

dataset['date'] = pd.to_datetime((dataset['date']))

dataset['date']

dataset.columns.to_series().groupby(dataset.dtypes).groups

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

dataset['2nd_road_class'].value_counts()/dataset.shape[0]*100

dataset = dataset.drop(['2nd_road_class'], axis=1)

dataset['driver_imd_decile'].value_counts()/dataset.shape[0]*100

dataset['driver_imd_decile'] = dataset['driver_imd_decile'].fillna(dataset['driver_imd_decile'].mode()[0])

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

dataset['age_of_vehicle'].describe()

dataset['age_of_vehicle'].fillna(6, inplace=True)
def fixedvehicleage(age):
    if age>=1 and age<=50:
        return age
    else:
        return np.nan

dataset['age_of_vehicle'] = dataset['age_of_vehicle'].apply(fixedvehicleage)

dataset['age_of_vehicle'].describe()

dataset['model'].value_counts()/dataset.shape[0]*100

dataset.loc[dataset['model'] =='0', 'model'] = None

dataset['model'].value_counts()/dataset.shape[0]*100

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

dataset['model'] = dataset['model'].fillna(dataset['model'].mode()[0])

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

dataset['engine_capacity_cc'].describe()

dataset['engine_capacity_cc'].hist(bins=20)

sns.boxplot(dataset['engine_capacity_cc'])

IQR= dataset['engine_capacity_cc'].quantile(0.75) - dataset['engine_capacity_cc'].quantile(0.25)
min_val= dataset['engine_capacity_cc'].quantile(0.25)-(IQR*3)
max_val= dataset['engine_capacity_cc'].quantile(0.75)+(IQR*3)
print(min_val)
print(max_val)

dataset.loc[dataset['engine_capacity_cc']>4095,'engine_capacity_cc']=4095

dataset['engine_capacity_cc'].describe()

sns.boxplot(dataset['engine_capacity_cc'])

dataset['engine_capacity_cc'].fillna(1840, inplace=True)

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

dataset['lsoa_of_accident_location'].value_counts()

dataset['lsoa_of_accident_location'].describe()

dataset['lsoa_of_accident_location'].fillna(method='ffill', inplace=True)

dataset.info()

for i in dataset:
  if dataset[i].dtype =='object':
    dataset[i] = dataset[i].fillna(dataset[i].mode()[0])
  elif dataset[i].dtype=='float64':
     dataset[i] = dataset[i].fillna(dataset[i].mean())
  elif dataset[i].dtype=='datetime64[ns]':
    dataset[i] = dataset[i].fillna(dataset[i].mode()[0])

dataset.isnull().sum().sort_values(ascending=False)/dataset.shape[0]*100

df_num = dataset[['engine_capacity_cc','number_of_casualties','number_of_vehicles','speed_limit']]

df_num.hist( bins=25, grid=False, figsize=(12,8))

dataset['number_of_casualties'].value_counts()

def casualities(num_cas):
    if num_cas >=1 and num_cas <2:
        return "1"
    elif num_cas >=2 and num_cas <3:
        return "2"
    elif num_cas >=3 and num_cas <4:
        return "3"
    elif num_cas >= 4 and num_cas <5:
        return "4"
    elif num_cas >= 5:
        return "5+"

dataset['number_of_casualties']= dataset['number_of_casualties'].apply(casualities)

dataset['number_of_casualties'].value_counts()

dataset['propulsion_code'].value_counts()/dataset.shape[0]*100

dataset['propulsion_code'] = dataset['propulsion_code'].replace(to_replace="Gas", value="Petrol")
dataset['propulsion_code'] = dataset['propulsion_code'].replace(to_replace="Gas/Bi-fuel", value="Bio-fuel")
dataset['propulsion_code'] = dataset['propulsion_code'].replace(to_replace="Petrol/Gas (LPG)", value="LPG Petrol")
dataset['propulsion_code'] = dataset['propulsion_code'].replace(to_replace="Gas Diesel", value="Diesel")

dataset['propulsion_code'].value_counts()/dataset.shape[0]*100

dataset.nunique().sort_values(ascending=False)

dataset['date'] = pd.to_datetime(dataset['date'])

dataset['month'] = dataset['date'].apply(lambda time: time.month)

dataset['weekend']= np.where(dataset['day_of_week'].isin(['Friday', 'Saturday', 'Sunday']), 1, 0)

timeofdaygroups = {1: "Morning Rush (6-10)",
                   2: "Day (10-12)",
                   3: "Lunch Rush (12-14)",
                   4: "Afternoon (14-16)",
                   5: "After Work Rush (16-18)",
                   6: "Evening (18-22)",
                   7: "Night (22-6)"}

dataset['hour'] = dataset['time'].str[0:2]  
dataset['hour'] =  pd.to_numeric(dataset['hour'])
dataset['hour'] = dataset['hour'].astype('int')

def daygroup(hour):
    if hour >= 6 and hour < 10:
        return "1"
    elif hour >= 10 and hour < 12:
        return "2"
    elif hour >= 12 and hour < 14:
        return "3"
    elif hour >= 14 and hour < 16:
        return "4"
    elif hour >= 16 and hour < 18:
        return "5"
    elif hour >= 18 and hour < 22:
        return "6"
    else:
        return "7"

dataset['time_of_day']= dataset['hour'].apply(daygroup)

dataset[['weekend','day_of_week','time', 'time_of_day']].tail(10)

dataset[['weekend','day_of_week','time', 'time_of_day']].head(10)

dataset['vehicle_type'].value_counts()/dataset.shape[0]*100

dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Motorcycle over 500cc", 
                                                        value="Motorcycle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace=
                                                        "Motorcycle over 125cc and up to 500cc",
                                                        value="Motorcycle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Motorcycle 125cc and under", 
                                                value="Motorcycle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Motorcycle 50cc and under", 
                                                        value="Motorcycle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Electric motorcycle", 
                                                        value="Motorcycle")

dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace=
                                                        "Van / Goods 3.5 tonnes mgw or under", 
                                                        value="Goods Vehicle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Goods over 3.5t. and under 7.5t", 
                                                        value="Goods Vehicle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Goods 7.5 tonnes mgw and over", 
                                                        value="Goods Vehicle")

dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Taxi/Private hire car", 
                                                        value="Car")

dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Minibus (8 - 16 passenger seats)", 
                                                        value="Bus")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace=
                                                        "Bus or coach (17 or more pass seats)", 
                                                        value="Bus")

dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Agricultural vehicle", 
                                                        value="Other Vehicle")
dataset['vehicle_type'] = dataset['vehicle_type'].replace(to_replace="Pedal cycle", 
                                                        value="Other Vehicle")

dataset['vehicle_type'].value_counts()/dataset.shape[0]*100

dataset['age_band_of_driver'].value_counts()/dataset.shape[0]*100

dataset['age_band_of_driver']=dataset['age_band_of_driver'].replace("Over 75","75-100")
dataset['age_band_of_driver']=dataset['age_band_of_driver'].replace("Data missing or out of range","26-35")
dataset['age_band_of_driver']=dataset['age_band_of_driver'].replace("45205","45-55")
dataset['age_band_of_driver']=dataset['age_band_of_driver'].replace("42309","45-55")

age1 = ["0 - 5", "6 - 10", "11 - 15"]
age2 = ["16 - 20","21 - 25"]
age3 = ["26 - 35","36 - 45"]
age4 = ["46 - 55", "56 - 65"]
age5 = ["66 - 75", "75-100"]

for (row, col) in dataset.iterrows():

    if str.lower(col.age_band_of_driver) in age1:
        dataset['age_band_of_driver'].replace(to_replace=col.age_band_of_driver, 
                                         value='Under 16', inplace=True)

    if str.lower(col.age_band_of_driver) in age2:
        dataset['age_band_of_driver'].replace(to_replace=col.age_band_of_driver, 
                                         value='16-25', inplace=True)
    
    if str.lower(col.age_band_of_driver) in age3:
        dataset['age_band_of_driver'].replace(to_replace=col.age_band_of_driver, 
                                         value='26-45', inplace=True)
    if str.lower(col.age_band_of_driver) in age4:
        dataset['age_band_of_driver'].replace(to_replace=col.age_band_of_driver, 
                                         value='46-65', inplace=True)
    if str.lower(col.age_band_of_driver) in age5:
        dataset['age_band_of_driver'].replace(to_replace=col.age_band_of_driver, 
                                         value='Over 65', inplace=True)

print("Distinct responses for age_band_of_driver:\n", set(dataset['age_band_of_driver']))

def vehicles(num_veh):
    if num_veh >=1 and num_veh <2:
        return "1"
    elif num_veh >=2 and num_veh <3:
        return "2"
    elif num_veh >=3 and num_veh <4:
        return "3"
    elif num_veh >= 4: 
        return "4+"
    
dataset['number_of_vehicles']= dataset['number_of_vehicles'].apply(vehicles)

dataset['number_of_vehicles'].value_counts()/dataset.shape[0]*100

dataset['number_of_vehicles'].dtypes

dataset['number_of_vehicles']=dataset['number_of_vehicles'].astype('object')

def getSeason(month):
    if (month == 12 or month == 1 or month == 2):
       return "winter"
    elif(month == 3 or month == 4 or month == 5):
       return "spring"
    elif(month == 6 or month== 7 or month == 8):
       return "summer"
    else:
       return "fall"

dataset['season'] = dataset['month'].apply(getSeason)

dataset['season'].value_counts()/dataset.shape[0]*100

def enginecap(eng_cc):
    if eng_cc <=1500:
        return "small engine cc"
    if eng_cc >1500 and eng_cc <=2000:
        return "medium engine cc"
    if eng_cc >2000:
        return "large engine cc"


dataset['engine_capacity_cc_size'] = dataset['engine_capacity_cc'].apply(enginecap)

dataset.engine_capacity_cc_size.value_counts()

dataset['accident_seriousness'] = dataset['accident_severity']
dataset['accident_seriousness'] = dataset['accident_seriousness'].replace(to_replace="Slight", 
                                                                value="Not Serious")
dataset['accident_seriousness'] = dataset['accident_seriousness'].replace(to_replace="Serious",
                                                                value="Serious")
dataset['accident_seriousness'] = dataset['accident_seriousness'].replace(to_replace="Fatal", 
                                                                value="Serious")
dataset.shape

dataset.accident_seriousness.value_counts()



accidentspermonth = dataset.groupby(['month'])['accident_index'].count()

# prepare plot
plt.style.use('dark_background')
plt.figure(figsize=(20,10))
colors = sns.color_palette("plasma_r", n_colors=12)
mt=sns.barplot(x=accidentspermonth.index,y=accidentspermonth.values, palette=colors)
sns.despine(top=True, right=True, left=True, bottom=True)
#ax is the axes instance
group_labels = ['Jan', 'Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec' ]

mt.set_xticklabels(group_labels)
plt.title("Accidents Per Month",fontsize=20,fontweight="bold")
plt.xticks(fontsize=18)
plt.yticks(fontsize=12)
plt.xlabel("\nMonth", fontsize=15, fontweight="bold")
plt.ylabel("\nNumber of Accidents", fontsize=15, fontweight="bold")
plt.savefig('accidentspermonth.png')
plt.tight_layout()

accidentsperseason = dataset.groupby(['season'])['accident_index'].count()
seaord=['spring', 'summer', 'fall','winter']
# prepare plot
plt.style.use('dark_background')
plt.figure(figsize=(15,10))

sns.barplot(x=accidentsperseason.index,y=accidentsperseason.values, order=seaord, 
            saturation=1, palette='magma_r')
sns.despine(top=True, right=True, left=True, bottom=True)
plt.title("Accidents Per Season",fontsize=20,fontweight="bold")
plt.xticks(fontsize=15)
plt.yticks(fontsize=12)
plt.xlabel("\nSeason", fontsize=15, fontweight="bold")
plt.ylabel("\nNumber of Accidents", fontsize=15, fontweight="bold")
plt.tight_layout()
plt.savefig('accidentsperseason.png')

timeofdaygroups = {'1': "Morning Rush",
                   '2': "Day",
                   '3': "Lunch Rush",
                   '4': "Afternoon",
                   '5': "After Work Rush",
                   '6': "Evening",
                   '7': "Night"}
dataset['time_of_day']=dataset['time_of_day'].map(timeofdaygroups)

accidentspertod = dataset.groupby(['time_of_day'])['accident_index'].count()

# prepare plot
plt.style.use('dark_background')
plt.figure(figsize=(15,10))
tod=["Morning Rush", "Day", "Lunch Rush", "Afternoon",
     "After Work Rush", "Evening", "Night"]
sns.barplot(x=accidentspertod.index,y=accidentspertod.values, order=tod, palette='rainbow')
sns.despine(top=True, right=True, left=True, bottom=True)
plt.title("Accidents Per Time of Day",fontsize=20,fontweight="bold")
plt.xticks(fontsize=15)
plt.yticks(fontsize=12)

plt.xlabel("", fontsize=15, fontweight="bold")
plt.ylabel("\nNumber of Accidents", fontsize=15, fontweight="bold")
plt.tight_layout()
plt.savefig('accidentspertod.png')

not_serious = dataset[(dataset['accident_seriousness']=="Not Serious")]
print("Not Serious Group Shape:", not_serious.shape)

not_serious.accident_seriousness.value_counts()

serious= dataset[(dataset['accident_seriousness']=="Serious")]

print("Serious Group Shape:", serious.shape)
serious.accident_seriousness.value_counts()

policeattend = {1: "Yes", 2:"No", 3:"Self-Reported"}
not_serious['did_police_officer_attend_scene_of_accident']=not_serious['did_police_officer_attend_scene_of_accident'].map(policeattend)
dataset['did_police_officer_attend_scene_of_accident']=dataset['did_police_officer_attend_scene_of_accident'].map(policeattend)
serious['did_police_officer_attend_scene_of_accident']=serious['did_police_officer_attend_scene_of_accident'].map(policeattend)

dftotal= float(len(dataset))
nstotal= float(len(not_serious))
setotal= float(len(serious))

fig, ax =plt.subplots(1,2,figsize = (15,8))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 = sns.countplot( x="did_police_officer_attend_scene_of_accident", hue="accident_seriousness", 
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="did_police_officer_attend_scene_of_accident", hue="accident_seriousness",  
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Did Police Officer Attend Scene Of Accident", fontsize=20, fontweight="bold")
ax1.set_xlabel('Attendance of Not Serious Accidents', fontsize=12, fontweight="bold")
ax2.set_xlabel('Attendance of Serious Accidents', fontsize=12, fontweight="bold")
ax1.set_ylabel('Number Attended')
ax2.set_ylabel('Number Attended')
ax1.get_legend().remove()
ax2.get_legend().remove()
plt.style.use('dark_background')
plt.savefig('did_police_officer_attend_scene_of_accident.png')
fig.show()

fpoa_order =["Front", "Nearside", "Did not impact", "Back", "Offside"]

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 =sns.countplot(x="accident_seriousness",hue="x1st_point_of_impact", hue_order=fpoa_order,  
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="accident_seriousness",hue="x1st_point_of_impact", hue_order=fpoa_order, 
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("First Point of Impact in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('First Point of Impact of Not Serious Accidents', fontsize=15, fontweight="bold")
ax2.set_xlabel('First Point of Impact of Serious Accidents',  fontsize=15, fontweight="bold")
ax1.set_ylabel('First Point of Impact Count', fontsize=15, fontweight="bold")
ax2.set_ylabel('')
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
plt.style.use('dark_background')
plt.savefig('x1st_point_of_impact.png')
fig.show()

nov_order=["1","2", "3", "4+"]

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 =sns.countplot(x="accident_seriousness", hue="number_of_vehicles", hue_order=nov_order,
              palette="GnBu_d", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="accident_seriousness", hue="number_of_vehicles", hue_order=nov_order,
              palette="GnBu_d", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Number of Vehicles in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('Number of Vehicles of Not Serious Accidents', fontsize=15, fontweight="bold")
ax2.set_xlabel('Number of Vehicles of Serious Accidents', fontsize=15, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('')
plt.style.use('dark_background')
plt.savefig('number_of_vehicles.png')
fig.show()

splt_order=[15, 20,30,40,50,60,70]
splt_order2=[20,30,40,50,60,70]
fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))

ax1 =sns.countplot(x="accident_seriousness", hue="speed_limit", hue_order=splt_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.4f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 =  sns.countplot(x="accident_seriousness", hue="speed_limit", hue_order=splt_order2,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Speed Limit in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('Speed Limit of Not Serious Accidents', fontsize=15, fontweight="bold")
ax2.set_xlabel('Speed Limit of Serious Accidents', fontsize=15, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
plt.style.use('dark_background')
plt.savefig('speed_limit.png')
fig.show()

fig, ax =plt.subplots(1,2,figsize = (15,8))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 =sns.countplot(x="accident_seriousness",  hue="urban_or_rural_area",
              palette="PuBu", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="accident_seriousness",  hue="urban_or_rural_area",
              palette="PuBu", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Urban or Rural Areas vs Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('\nUrban or Rural Areas vs Not Serious Accidents', fontsize=14, fontweight="bold")
ax2.set_xlabel('\nUrban or Rural Areas vs Serious Accidents', fontsize=14, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('')
plt.style.use('dark_background')
plt.savefig('urban_or_rural_area.png')
fig.show()

sao_order=["None", "Skidded", "Skidded and overturned", "Overturned", "Jackknifed", 
           "Jackknifed and overturned"]
fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)
ax1 =sns.countplot(x="accident_seriousness", hue="skidding_and_overturning", hue_order=sao_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.3f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 =  sns.countplot(x="accident_seriousness", hue="skidding_and_overturning", hue_order=sao_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.3f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Skidding and Overturning in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('\nSkidding and Overturning in Not Serious Accidents', fontsize=14, fontweight="bold")
ax2.set_xlabel('\nSkidding and Overturning in Serious Accidents', fontsize=14, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
plt.style.use('dark_background')
plt.savefig('skidding_and_overturning.png')
fig.show()

vlc_order=["Did not leave carriageway", "Straight ahead at junction", "Nearside", 
           "Offside", "Offside on to central reservation", "Nearside and rebounded", 
           "Offside - crossed central reservation", "Offside and rebounded", 
           "Offside on to centrl res + rebounded"]

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)
ax1 =sns.countplot(x="accident_seriousness", hue="vehicle_leaving_carriageway", hue_order=vlc_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 =  sns.countplot(x="accident_seriousness", hue="vehicle_leaving_carriageway", hue_order=vlc_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Vehicle Leaving Carriageway in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Not Serious Accidents\n\n', fontsize=13, fontweight="bold")
ax2.set_xlabel('Serious Accidents', fontsize=13, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
plt.style.use('dark_background')
plt.savefig('vehicle_leaving_carriageway.png')
fig.show()

sod_order=["Female", "Male", "Not known"]

fig, ax =plt.subplots(1,2,figsize = (15,8))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 =sns.countplot(x="accident_seriousness", hue="sex_of_driver", hue_order=sod_order,
              palette="magma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="accident_seriousness", hue="sex_of_driver", hue_order=sod_order,
              palette="magma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Sex of Driver in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('\nSex of Driver in Not Serious Accidents', fontsize=14, fontweight="bold")
ax2.set_xlabel('\nSex of Driver in Serious Accidents', fontsize=14, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('')
plt.style.use('dark_background')
plt.savefig('sex_of_driver.png')
fig.show()

vt_order=['Bus', 'Car', 'Goods Vehicle', 'Motorcycle', 'Other Vehicle']

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)
ax1 =sns.countplot(x="accident_seriousness", hue="vehicle_type", hue_order=vt_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 =  sns.countplot(x="accident_seriousness", hue="vehicle_type", hue_order=vt_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Vehicle Type in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Vehicle Type in Not Serious Accidents\n\n', fontsize=13, fontweight="bold")
ax2.set_xlabel('Vehicle Type in Serious Accidents', fontsize=13, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
plt.style.use('dark_background')
plt.savefig('vehicle_type.png')
fig.show()

vm_order=['Turning right', 'Going ahead other', 'Going ahead right-hand bend',
          'Slowing or stopping', 'Turning left', 'Waiting to go - held up',
          'Waiting to turn right', 'Overtaking static vehicle - offside' ,
          'Parked', 'Overtaking - nearside', 'U-turn', 'Changing lane to right', 
          'Reversing', 'Waiting to turn left', 'Changing lane to left',
          'Going ahead left-hand bend', 'Overtaking moving vehicle - offside', 'Moving off']

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="vehicle_manoeuvre",hue_order=vm_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="vehicle_manoeuvre",hue_order=vm_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Vehicle Manuevers in Accidents", fontsize=18, fontweight="bold")

ax1.set_xlabel('Vehicle Manuevers in Not Serious Accidents\n\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Vehicle Manuevers in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.tight_layout() # No overlap of subplots
plt.style.use('dark_background')
plt.savefig('vehicle_manoeuvre.png')
fig.show()

dhoa_order=['Urban area', 'Rural', 'Small town']

fig, ax =plt.subplots(1,2,figsize = (15,8))
sns.despine(top=True, right=True, left=False, bottom=False)
ax1 =sns.countplot(x="accident_seriousness", hue="driver_home_area_type", hue_order=dhoa_order,
              palette="magma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
ax2 = sns.countplot(x="accident_seriousness", hue="driver_home_area_type", hue_order=dhoa_order,
              palette="magma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12) 
fig.suptitle("Driver Home Type Area in Accidents", fontsize=20, fontweight="bold")
ax1.set_xlabel('\nDriver Home Type Area in Not Serious Accidents', fontsize=14, fontweight="bold")
ax2.set_xlabel('\nDriver Home Type Area in Serious Accidents', fontsize=14, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.set_ylabel('')
plt.style.use('dark_background')
plt.savefig('driver_home_area.png')
fig.show()

abod_order=['Under 16', '16-25', '26-45', '46-65','Over 65']


fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="age_band_of_driver", hue_order=abod_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="age_band_of_driver", hue_order=abod_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Age Band of Driver in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Age Band of Driver in Not Serious Accidents\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Age Band of Driver in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.style.use('dark_background')
plt.savefig('age_band_of_driver.png')
fig.show()

hooffc_order=['None', 'Lamp post', 'Road sign or traffic signal', 'Other permanent object',
              'Entered ditch', 'Tree', 'Near/Offside crash barrier','Central crash barrier',
              'Bus stop or bus shelter', 'Telegraph or electricity pole', 'Submerged in water',
              'Wall or fence']

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="hit_object_off_carriageway", hue_order=hooffc_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.3f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="hit_object_off_carriageway", hue_order=hooffc_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Objects Hit Off Carriageway in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Objects Hit Off Carriageway in Not Serious Accidents\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Objects Hit Off Carriageway in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.style.use('dark_background')
plt.savefig('hit_object_off_carriageway.png')
fig.show()

hoinc_order=['None', 'Kerb', 'Other object', 'Bollard or refuge', 'Parked vehicle',
             'Road works', 'Open door of vehicle', 'Central island of roundabout',
             'Previous accident', 'Bridge (side)', 'Any animal (except ridden horse)',
             'Bridge (roof)']


fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="hit_object_in_carriageway", hue_order=hoinc_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.3f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="hit_object_in_carriageway", hue_order=hoinc_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.3f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Objects Hit in Carriageway in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Objects Hit in Carriageway in Not Serious Accidents\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Objects Hit in Carriageway in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.style.use('dark_background')
plt.savefig('hit_object_in_carriageway.png')
fig.show()

jud_order=['T or staggered junction', 'Mini-roundabout', 'Crossroads',
           'Private drive or entrance', 'More than 4 arms (not roundabout)',
           'Roundabout', 'Slip road', 'Other junction','Not at junction or within 20 metres']

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="junction_detail", hue_order=jud_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="junction_detail", hue_order=jud_order,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Junction Details in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Junction Details in Not Serious Accidents\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Junction Details in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=15, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.style.use('dark_background')
plt.savefig('junction_detail.png')
fig.show()

pd_order=['Petrol', 'Heavy oil', 'Hybrid electric', 'Bio-fuel', 'LPG Petrol', 'Diesel',
          'Fuel cells', 'New fuel technology', 'Electric diesel']
pd_order2=['Petrol', 'Heavy oil', 'Hybrid electric', 'Bio-fuel', 'LPG Petrol', 'Electric diesel']

fig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))
sns.despine(top=False, right=True, left=True)

ax1 =sns.countplot(x="accident_seriousness", hue="propulsion_code", hue_order=pd_order,
              palette="plasma", data=not_serious, ax=ax[0])
for p in ax1.patches:
    height = p.get_height()
    ax1.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/nstotal*100),
            ha="center",fontsize=12) 
    
ax2 =  sns.countplot(x="accident_seriousness", hue="propulsion_code", hue_order=pd_order2,
              palette="plasma", data=serious, ax=ax[1])
for p in ax2.patches:
    height = p.get_height()
    ax2.text(p.get_x()+p.get_width()/2.,
            height + 4,
            '{:1.2f}%'.format(height/setotal*100),
            ha="center",fontsize=12)
    
fig.suptitle("Propulsion Codes in Accidents", fontsize=18, fontweight="bold")
ax1.set_xlabel('Propulsion Codes in Not Serious Accidents\n', fontsize=13.5, fontweight="bold")
ax2.set_xlabel('Propulsion Codes in Serious Accidents', fontsize=13.5, fontweight="bold")
ax1.set_ylabel('Number of Accidents', fontsize=13.5, fontweight="bold")
ax2.set_ylabel('Number of Accidents', fontsize=13.5, fontweight="bold")
ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)

plt.style.use('dark_background')
plt.savefig('propulsion_code.png')
fig.show()

dataset.columns

"""dataset["accident_seriousness"]"""

dataset=dataset.drop(['date'],axis=1)

for i in dataset.columns:
  if dataset[i].dtype=='object':
    print(i,", ",end="")

from sklearn.preprocessing import LabelEncoder

for i in dataset.columns:
  if dataset[i].dtype=="object":
    lr=LabelEncoder()
    dataset[i]=lr.fit_transform(dataset[i])

df=dataset.drop('accident_severity',axis=1)

df.columns

df_ml=dataset[['did_police_officer_attend_scene_of_accident','light_conditions', 'pedestrian_crossing-human_control',
       'road_surface_conditions', 'road_type',
       'speed_limit','weather_conditions','age_band_of_driver', 'age_of_vehicle', 'sex_of_driver', 'model']]

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(df_ml.values,dataset['accident_seriousness'].values,test_size=0.4,random_state=1)

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score,classification_report

from sklearn.linear_model import LogisticRegression

from sklearn.ensemble import AdaBoostClassifier

random_forest = RandomForestClassifier(n_estimators=200)
random_forest.fit(X_train,y_train)
Y_pred1 = random_forest.predict(X_test)
random_forest.score(X_test, y_test)
acc_random_forest1 = round(random_forest.score(X_test, y_test) * 100, 2)

sk_report = classification_report(
    digits=6,
    y_true=y_test, 
    y_pred=Y_pred1)
print("Accuracy" , acc_random_forest1)
print(sk_report)
pd.crosstab(y_test, Y_pred1, rownames=['Actual'], colnames=['Predicted'], margins=True)

input_data=(1.0,2,1.0,2,4,60,8,2,14,0,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction1=random_forest.predict(input_data_reshaped)
print(prediction1)
if prediction1[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

logistic_regression = LogisticRegression(max_iter=1000)
logistic_regression.fit(X_train,y_train)
Y_pred2 = logistic_regression.predict(X_test)
logistic_regression.score(X_test, y_test)
acc_logistic_regression = round(logistic_regression.score(X_test, y_test) * 100, 2)

sk_report = classification_report(
    digits=6,
    y_true=y_test, 
    y_pred=Y_pred2)
print("Accuracy" , acc_logistic_regression)
print(sk_report)
pd.crosstab(y_test, Y_pred2, rownames=['Actual'], colnames=['Predicted'], margins=True)

Y_pred2

y_test

input_data=(3.0,0,0.0,2,4,30,5,3,1,1,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction2=logistic_regression.predict(input_data_reshaped)
print(prediction2)
if prediction2[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

Adaboost_Classifier = AdaBoostClassifier(n_estimators=200,learning_rate=1)
Adaboost_Classifier.fit(X_train,y_train)
Y_pred3 = Adaboost_Classifier.predict(X_test)
Adaboost_Classifier.score(X_test, y_test)
acc_Adaboost_Classifier = round(Adaboost_Classifier.score(X_test, y_test) * 100, 2)

sk_report = classification_report(
    digits=6,
    y_true=y_test, 
    y_pred=Y_pred3
print("Accuracy" , acc_Adaboost_Classifier)
print(sk_report)
pd.crosstab(y_test, Y_pred3, rownames=['Actual'], colnames=['Predicted'], margins=True)

input_data=(3.0,0,0.0,2,4,30,5,3,1,1,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction3=Adaboost_Classifier.predict(input_data_reshaped)
print(prediction3)
if prediction3[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

from sklearn.svm import SVC
from sklearn.ensemble import BaggingClassifier

Bagging_Classifier = BaggingClassifier(estimator=SVC(),n_estimators=200, random_state=0)
Bagging_Classifier.fit(X_train,y_train)
Y_pred4 = Bagging_Classifier.predict(X_test)
Bagging_Classifier.score(X_test, y_test)
acc_Bagging_Classifier = round(Bagging_Classifier.score(X_test, y_test) * 100, 2)

sk_report = classification_report(
    digits=6,
    y_true=y_test, 
    y_pred=Y_pred4)
print("Accuracy" , acc_Bagging_Classifier)
print(sk_report)
pd.crosstab(y_test, Y_pred4, rownames=['Actual'], colnames=['Predicted'], margins=True)

input_data=(3.0,0,0.0,2,4,30,5,3,1,1,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction4=Bagging_Classifier.predict(input_data_reshaped)
print(prediction4)
if prediction4[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

from sklearn.linear_model import LogisticRegressionCV

lr = LogisticRegressionCV(max_iter=1000,cv=3, random_state=0,multi_class='multinomial')
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
sk_report = classification_report(
     digits=6,
     y_true=y_test, 
    y_pred=y_pred)
print("Accuracy", round(accuracy_score(y_pred, y_test)*100,2))
print(sk_report)
pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'], margins=True)

input_data=(3.0,0,0.0,2,4,30,5,3,1,1,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction5=lr.predict(input_data_reshaped)
print(prediction5)
if prediction5[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

from sklearn.model_selection import RandomizedSearchCV
param_grid = {
     'bootstrap': [True],
     'max_depth': [80, 90, 100, 110],
     'max_features': [4, 5],
     'min_samples_leaf': [5, 10, 15],
     'min_samples_split': [8, 10, 12],
     'n_estimators': [100, 200, 300]
 }
random_f = RandomForestClassifier()
grid_search = RandomizedSearchCV(estimator = random_f, param_distributions = param_grid, 
                           cv = 3, n_jobs = -1, verbose = 2)

grid_search.fit(X_train,y_train)

Y_pred1 = grid_search.predict(X_test)
acc_random_forest1 = round(grid_search.score(X_test, y_test) * 100, 2)

sk_report = classification_report(
     digits=6,
     y_true=y_test, 
     y_pred=Y_pred1)
print("Accuracy" , acc_random_forest1)
print(sk_report)
pd.crosstab(y_test, Y_pred1, rownames=['Actual'], colnames=['Predicted'], margins=True)

input_data=(3.0,0,0.0,2,4,30,5,3,1,1,1221)
input_data_As_np_array=np.asarray(input_data)
input_data_reshaped=input_data_As_np_array.reshape(1,-1)
prediction6=grid_search.predict(input_data_reshaped)
print(prediction6)
if prediction6[0]==0:
  print('The accident was not fatal')
else:
  print('The accident was fatal.')

names=['LogisticRegression','RandomForestClassifier','AdaBoostClasifier','BaggingClassifier','LogisticRegressionCV','RandomSearchCV']

classifiers=[LogisticRegression(max_iter=1000),
            RandomForestClassifier(n_estimators=200),
             AdaBoostClassifier(n_estimators=200,learning_rate=1),
             BaggingClassifier(estimator=SVC(),n_estimators=200, random_state=0),
             LogisticRegressionCV(max_iter=1000,cv=3, random_state=0,multi_class='multinomial'),
             RandomizedSearchCV(estimator = random_f, param_distributions = param_grid,cv = 3, n_jobs = -1, verbose = 2)]

scores = []
for name, clf in zip(names, classifiers):
    clf.fit(X_train,y_train)
    score = clf.score(X_test,y_test)
    scores.append(score)

scores

df = pd.DataFrame()
df['name'] = names
df['score'] = scores
df

cm = sns.light_palette("green", as_cmap=True)
s = df.style.background_gradient(cmap=cm)
s

sns.set(style="whitegrid")
ax = sns.barplot(y="name", x="score", data=df)

import pickle

filename='road_accident_model.sav'
pickle.dump(classifiers, open(filename, 'wb'))

loaded_model = pickle.load(open('road_accident_model.sav', 'rb'))

